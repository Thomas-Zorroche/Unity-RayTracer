#pragma kernel CSMain

// Uniforms
RWTexture2D<float4> Result;
float4x4 uCameraToWorld;
float4x4 uCameraInverseProjection;
Texture2D<float4> uSkybox;
SamplerState sampleruSkybox;
float2 uPixelOffset;

// Compute Buffers
struct Sphere 
{
    float3 center;
    float radius;
    float3 diffuse;
    float3 specular;
};
StructuredBuffer<Sphere> _Spheres;


static const float PI = 3.14159265f;
static const int MAX_RAYS = 8;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Camera origin --> world space
    float3 origin = mul(uCameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(uCameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(uCameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 diffuse;
    float3 specular;
};
RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.diffuse = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectPlan(Ray ray, inout RayHit bestHit)
{
    // Plan : y = 0
    float distanceToPlan = -ray.origin.y / ray.direction.y;
    if (distanceToPlan > 0 && distanceToPlan < bestHit.distance)
    {
        bestHit.distance = distanceToPlan;
        bestHit.position = ray.origin + distanceToPlan * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.diffuse = float3(0.6f, 0.6f, 0.6f);
        bestHit.specular = float3(0.05f, 0.05f, 0.05f);
    }
}
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 camToSphere = ray.origin - sphere.center;
    
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(ray.direction, camToSphere);
    float c = dot(camToSphere, camToSphere) - (sphere.radius * sphere.radius);

    float delta = b*b - 4*a*c;
    if (delta < 0)
        return;
    
    float dst = 1.#INF;
    if (delta == 0)
    {
        dst = -b / a;
    }
    else if(delta > 0)
    {
        float sqrtDelta = sqrt(delta);
        float a1 = (-b + sqrtDelta) / 2 * a;
        float a2 = (-b - sqrtDelta) / 2 * a;
        dst = a1 < a2 ? a1 : a2;
    }

    if (dst > 0 && dst < bestHit.distance)
    {
        bestHit.distance = dst;
        bestHit.position = ray.origin + dst * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.center);
        bestHit.diffuse = sphere.diffuse;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray)
{
    // Compute closest hit on objects in the scene
    RayHit bestHit = CreateRayHit();

    // Plan
    IntersectPlan(ray, bestHit);

    // Spheres
    uint nSpheres, stride;
    _Spheres.GetDimensions(nSpheres, stride);
    for (uint i = 0; i < nSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Normal Shading
        //return hit.normal * 0.5f + 0.5f;

        float3 specular = float3(0.05f, 0.05f, 0.05f);
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;
        
        // Shading
        return saturate(hit.diffuse);
    }
    else
    {
        ray.energy = 0.0f;
        // Sample the skybox
        float theta = -acos(ray.direction.y) / PI;
        float phi = -atan2(ray.direction.x, -ray.direction.z) / PI * 0.5f;
        return uSkybox.SampleLevel(sampleruSkybox, float2(phi, theta), 0).xyz;
    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1, 1]
    float2 uv = float2((id.xy + uPixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Create a ray from the camera
    Ray ray = CreateCameraRay(uv);

    // Trace and Shade
    float3 finalColor = float3(0, 0, 0);
    for (int i = 0; i < MAX_RAYS; i++)
    {
        RayHit hit = Trace(ray);
        finalColor += ray.energy * Shade(ray, hit);

        // if ray has no more energy, break
        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(finalColor, 1);
}
